//ALGO JEU D'ECHEC

struct piece {
    team: entier
    class: string
    posX: entier
    posY: entier
    plays: entier
    panwTrail: entier
    teamTrail: entier
}

fonction construct (team: entier, class: string): piece {
    piece newPiece
    newPiece.class = class
    newPiece.team = team
    newPiece.plays = 0
    newPiece.panwTrail = 0
    newPiece.teamTrail = 0
    retourner(newPiece)
}

board: tableau d'entier 8x8

fonction initiateBoard (): vide {
    // construction des 8 pions de chaque team
    pour i allant de 0 à 7 
        board[1][i] = construct(1, "pawn")
        board[6][i] = construct(2, "pawn")
    fin pour

    // construction rook pour la team red 
    board[0][0]=construct(1,"rook")
    board[0][7]=construct(1,"rook")

    // construction rook pour la team blue 
    board[7][0]=construct(2,"rook")
    board[7][7]=construct(2,"rook")

    // construction knight pour la team red 
    board[0][1]=construct(1,"knight")
    board[0][6]=construct(1,"knight")
    
    // construction knight pour la team blue 
    board[7][1]=construct(2,"knight")
    board[7][6]=construct(2,"knight")

    // construction bishop pour la team red 
    board[0][2]=construct(1,"bishop")
    board[0][5]=construct(1,"bishop")

    // construction bishop pour la team blue 
    board[7][2]=construct(2,"bishop")
    board[7][5]=construct(2,"bishop")

    // construction queen pour la team red 
    board[0][3]=construct(1,"queen")

    // construction queen pour la team blue 
    board[7][3]=construct(2,"queen")
    
    // construction king pour la team red 
    board[0][4]=construct(1,"king")

    // construction king pour la team blue 
    board[7][4]=construct(2,"king")
}

fonction getPos(piece: piece): tableau d'entier {
    temp: tableau d'entier de taille 2
    temp[0] = -1
    temp[1] = -1
    pour x allant de 0 à 7
        pour y allant de 0 à 7
            si piece est égale à board[x][y]
                temp[0] = x
                temp[1] = y
                retourner(temp)
            fin si
        fin pour
    fin pour
}

fonction move(player: int): vide {
    laPiece: piece
    target: piece

    faire
        buildBoard(NULL)
        afficher("Joueur {player} Entrer la position du pion que vous voulez bouger (ex: A,1):")
        lapiece = choosePos()
        si lapiece.team != player ALORS
            afficher("Ce n'est pas votre pion!")
        fin si

        buildBoard(laPiece)

        printf("Joueur {player} : Vers quelle position voulez vous bouger cette piece ? (ex: A,1): ")
        target = choosePos()
        si !checkMove(laPiece, getPos(target)[0], getPos(target)[1]) ALORS
            afficher("Cette position n'est pas valide!")
        fin si
    tant que laPiece->team != player OU !checkMove(laPiece, getPos(target)[0], getPos(target)[1])

    buildBoard(laPiece)

    si laPiece.class == "pawn" ET valeurAbsolue(getPos(target)[0]-getPos(laPiece)[0] == 2) ALORS
        trailedPiece: piece
        trailedPiece = board[(getPos(laPiece)[0]+getPos(target)[0])/2][(getPos(laPiece)[1])]
        trailedPiece.pawnTrail = 1
        trailedPiece.teamTrail = laPiece.team
    fin si

    si laPiece->class == "pawn" ET valeurAbsolue(getPos(target)[0]-getPos(laPiece)[0]) == 2) ALORS
        board[(getPos(laPiece)[0]+getPos(target)[0])/2][(getPos(laPiece)[1])].pawnTrail = 1
    fin si
    
    if(target->pawnTrail == 1 ET target->team != laPiece->team){
        empty: piece
        empty = board[getPos(laPiece)[0]][(getPos(target)[1])]
        board[getPos(laPiece)[0]][(getPos(target)[1])].class = NULL
        board[getPos(laPiece)[0]][(getPos(target)[1])].team = 0
        board[getPos(laPiece)[0]][(getPos(target)[1])].pawnTrail = 0
    }

    target.class = laPiece.class
    target.team = laPiece.team
    laPiece.plays++
    target.plays = lapiece.plays
    laPiece.class = NULL
    lapiece.team = 0

    si target.class == "rook" & laPiece == "king" && target.team == laPiece.class ALORS
        SI getPos(laPiece)[1] > getPos(target)[1] ALORS
            board[getPos(laPiece)[0]][6].class = "king"
            board[getPos(laPiece)[0]][5].class = "rook"

        SI getPos(laPiece)[1] < getPos(target)[1] ALORS
            board[getPos(laPiece)[0]][1].class = "king"
            board[getPos(laPiece)[0]][2].class = "rook"

        board[getPos(target)[0]][getPos(target)[0]].class = NULL
            


    si target->class == "pawn" ET (getPos(target)[0] == 0 OU getPos(target)[0] == 7)) ALORS

        class: char
        class = demander("votre pion a atteint la derniere rangee, choisissez sa nouvelle classe reine: q fou: b tour: r cavalier: n Votre choix:")
        
        switch (class)
        debut
            case 'q':
                target-.class = "queen"
                quitter
            case 'r':
                target->class = "rook"
                quitter
            case 'b':
                target->class = "bishop"
                quitter
            case 'n':
                target->class = "knight"
                quitter
            default:
                quitter
        fin

    fin si
}

// Correspond à la fonction checkMove(piece, x, y)
FONCTION ENTIER CHECKMOVE
    VARIABLE GLOBALE
        PIECE: board
    INPUT
        PIECE: Piece
        ENTIER: x 
        ENTIER: y
    VARIABLE
       TABLEAU : pos 
       ENTIER: posX
       ENTIER: posY
       ENTIER: possible
       ENTIER: orientation
       ENTIER: checkX
       ENTIER: checkY
       TABLEAU: tab
    DEBUT

        pos = getPos(Piece)
        posX = pos[0]
        posY = pos[1]
        possible = 0

        // si la piece est un pion
        SI Piece->class == "pawn" ALORS
            orientation = 0

            // on verifie le sens 
            SI Piece->team == 1 ALORS
                orientation = -1
            SINON
                orientation = 1
            FIN SI

            
            SI (posX == x + 1 * orientation) ET (posY == y) ET (board[x][y].team == 0) ALORS
                possible = 1
            FIN SI

            SI (posX == 3.5 + 2.5 * orientation ET posX == x + 2 * orientation ET posY == y) ALORS
                possible = 1
            FIN SI

            SI (VALEUR_ABSOLUE(posY - y) == 1 ET posX == x + 1 * orientation ET (board[x][y].team != 0 ET board[x][y].teamTrail != Piece->team ET board[x][y].pawnTrail == 1) ALORS
                possible = 1
            FIN SI

            SI (board[x][y].pawnTrail == 1) ALORS
                possible = 1
            FIN SI
        FIN SI

        // si la piece est le fou ou la reine
        SI Piece->class == "bishop" OU Piece->class == "queen" ET possible == 0 ALORS
            SI VALEUR_ABSOLUE(posX - x) == VALEUR_ABSOLUE(posY - y) ALORS
                possible = 1

                checkX = posX
                checkY = posY

                TANT QUE ((checkX EST DIFFERENT DE x) OU (checkY EST DIFFERENT DE y)) ET possible = 1 
                    SI posX < x ALORS
                        checkX += checkX
                    SINON
                        checkX -= checkX
                    FIN SI

                    SI posY < y ALORS
                        checkY += checkY
                    SINON
                        checkY -= checkY
                    FIN SI

                    tab = getPos(board[checkX][checkY])

                    SI board[checkX][checkY].team EST DIFFERENT DE 0 ALORS
                        possible = 0
                    FIN SI

                    SI board[checkX][checkY] == board[x][y] ALORS
                        possible = 1
                    FIN SI

                FIN TANT QUE
        FIN SI

        // si la piece est la tour ou la reine
        SI (Piece->class == "rook" OU Piece->class == "queen") ET possible == 0 ALORS
            SI (posX == x ET posY EST DIFFERENT DE y OU posX EST DIFFERENT DE x) ET posY == y ALORS

                possible = 1

                checkX = posX
                checkY = posY

                TANT QUE (checkX EST DIFFERENT DE x OU checkY EST DIFFERENT DE y) ET possible = 1

                    SI posX < x ALORS checkX += checkX
                    SI posX > x ALORS checkX -= checkY

                    SI posY < y ALORS checkY += checkY
                    SI posY > y ALORS checkY -= checkY

                    tab = getPos(board[checkX][checkY])

                    SI (board[checkX][checkY].team) EST DIFFERENT DE 0 ALORS
                        possible = 0
                    FIN SI

                    SI board[checkX][checkY] == board[x][y] ALORS
                        possible = 1
                    FIN SI
            FIN SI
        FIN SI

        SI Piece->class = "knight" ALORS
            SI VALEUR_ABSOLUE(posX - x) == 1 ET VALEUR_ABSOLUE(posY - y) == 2 
                OU VALEUR_ABSOLUE(posX - x) == 2 ET VALEUR_ABSOLUE(posY - y) == 1
            ALORS
                possible = 1
            FIN SI
        FIN SI

        SI Piece->class = "king" ALORS
            SI (VALEUR_ABSOLUE(posX - x) == 1 OU posX = x) ET (VALEUR_ABSOLUE(posY - y) OU posY == y) ALORS
                possible = 1
            FIN SI
        FIN SI

        SI Piece->team == board[x][y].team
            possible = 1
        FIN SI

        SI Piece->class == "king" ET Piece->plays == 0 ET board[x][y].plays == 0 ET board[x][y].class == "rook" ET board[x][y].team == piece->team ALORS
            SI (posX == x ET posY EST DIFFERENT DE y) OU (posX EST DIFFERENT DE x ET posY == y) ALORS
                possible = 1

                checkX = posX
                checkY = posY

                TANT QUE checkY EST DIFFERENT DE y ET possible == 1
                    SI posY < y ALORS checkY += checkY
                    SI posY > y ALORS checkY -= checkY

                    SI board[checkX][checkY].class EST DIFFERENT DE "rook" ET board[checkX][checkY].team EST DIFFERENT DE 0 ALORS
                        possible = 0
                    FIN SI

                    SI board[checkX][checkY] == board[x][y] ET board[checkX][checkY].team == Piece->team ALORS
                        possible = 1
                    FIN SI
                FIN TANT QUE
            FIN SI
        FIN SI

        RETOURNER possible
FIN FONCTION

fonction buildBoard(piece: piece): vide {
    pour i allant de 0 à 7
        // on affiche les 8 lettre de l'alphabet de A à H en haut du board
        afficher(dechiffrerASCII(65+i))
    fin pour
    
    pour i allant de 0 à 7
        // on affiche les numéro de 8 à 1 au debut de chaque ligne
        afficher(8-i)
    
        pour j allant de 0 à 7
            si board[i][j].team == 1
                mettre la couleur de la prochaine pièce sur rouge
            fin si
            si board[i][j].team == 2
                mettre la couleur de la prochaine pièce sur bleu
            fin si
            // si le pion selectionné en paramètre a la possibilité de se déplacé sur la case i,j
            si checkMove(piece, i, j) == 1
                mettre la couleur de la prochaine pièce sur vert
            fin si

            switch (board[i][j].class) 
                case "pawn":
                    afficher("P")
                    break
                case "rook":
                    afficher("R")
                    break
                case "knight":
                    afficher("N")
                    break
                case "bishop":
                    afficher("B")
                    break
                case "queen":
                    afficher("Q")
                    break
                case "king":
                    afficher("K")
                    break
                default:
                    afficher("X")
                    break
            fin switch
        fin pour
        // on affiche les numéro de 8 à 1 à la fin de chaque ligne
        afficher(8-1)
    fin pour
    
    pour i allant de 0 à 7
        // on affiche les 8 lettre de l'alphabet de A à H en bas du board
        afficher(dechiffrerASCII(65+i))
    fin pour
}

fonction choosePos(): piece {
    pos: string
    pos = Entré utilisateur de la forme A,1
    tablePos: tableau de string
    tablePos = pos.split(",")
    // Il existe une table de correspondance:
    /*
    Lettre:
        A => 0
    Chiffre:
        1 => 0
    */
    x, y: entier
    x = tablePos[0] // en utilisant la table de correspondance
    y = tablePos[1] // en utilisant la table de correspondance
    retourner(board[x][y])
}

// La fonction countScore permettais de calculer le score de chaque pion pour l'IA (fonction non utilisé)
fonction countScore(piece board[][8]): entier {
    score: entier
    score = 0
    pour x allant de 0 à 7
        pour y allant de 0 à 7
            value: entier
            value = 0

            SI board[x][y].class == "king" ALORS value = 900 FIN SI
            SI board[x][y].class == "queen" ALORS value = 90 FIN SI
            SI board[x][y].class == "rook" ALORS value = 50 FIN SI
            SI board[x][y].class == "bishop" ALORS value = 30 FIN SI
            SI board[x][y].class == "knight" ALORS value = 30 FIN SI
            SI board[x][y].class == "pawn" ALORS value = 10 FIN SI
            SI board[x][y].team == 2 ALORS score += value SINON score -= value FIN SI
        
        fin pour
    fin pour

    retourner(score)
}

FONCTION checkWin(){
    VARIABLE GLOBALE
        PIECE: board

    VARIABLE
    
    entier: winOne
    entier: winTwo
    
    DEBUT
    winOne = 1
    winTwo = 1
    pour x allant de 0 a 7 FAIRE
    
        pour y allant de 0 a 7 FAIRE

            SI board[x][y].class == "king" ALORS
            
                SI board[x][y].team == 1 ALORS
                    winTwo = 0
            
                SI board[x][y].team == 2
                    winOne = 0

    SI winOne == 1 ALORS
    
        retourner 1
    
    SI winTwo == 1 ALORS
    
        retourner 2
    
    retourner 0
    
FIN

fonction main(): entier {
    initiateBoard()
    i: entier
    win: entier
    win = 0
    i = 0
    tant que win == 0 FAIRE
        move((i%2)+1)
        i++
        win = checkWin()
    fin tant que

    affiche(Bravo au joueur {win}, il remporte la partie!)

    retourner(0)
}

============================FONCTION IA NON IMPLEMENTE===========================

struct pieceMove{
    entier: score
    entier: pieceX
    entier: pieceY
    entier: moveY
    entier: moveX
}

pieceMove eval: pieceMove{
    VARIABLE GLOBALE
        PIECE: board
    
    VARIABLE
        pieceMove moves[8][8]
    
    DEBUT

    POUR x allant de 0 a 7 FAIRE
    
        POUR y allant de 0 a 7 FAIRE
            
            Si board[x][y].team == 2 ALORS

                POUR w allant de 0 a 7 FAIRE
                
                    POUR w allant de 0 a 7 FAIRE
                    
                        pieceMove pieceMoves[8][8]

                        piece copieBoard[8][8]

                        POUR k allant de 0 a 7 FAIRE
                        
                            POUR l allant de 0 a 7 FAIRE
                            
                                copieBoard[k][l] = board[k][l]
                            FIN POUR
                        FIN POUR
                        
                        POUR k allant de 0 a 7 FAIRE
                        
                            POUR l allant de 0 a 7 FAIRE
                            
                                SIcheckMove(&copieBoard[x][y],z,w) == 1 && copieBoard[x][y].team == 2 ALORS
                                   piece laPiece = copieBoard[x][y]
                                    piece target = copieBoard[z][w]

                                    target.class = laPiece.class
                                    target.team = laPiece.team
                                    target.plays = laPiece.plays
                                    laPiece.class = NULL
                                    laPiece.team = 0
                                    
                                    pieceMoves[z][w].score = countScore(copieBoard)

                                SINON 
                                
                                    pieceMoves[z][w].score = -10000
                                FIN SI
                                
                            FIN POUR
                        FIN POUR

                        POUR i allant de 0 a 7 FAIRE
                        
                            POUR j allant de 0 a 7 FAIRE
                            
                                SI pieceMoves[i][j].score > moves[x][y].score ALORS
                                    moves[x][y].score = pieceMoves[z][w].score
                                    moves[x][y].moveX = pieceMoves[z][w].moveX
                                    moves[x][y].moveY = pieceMoves[z][w].moveY
                                    moves[x][y].pieceX = pieceMoves[z][w].pieceX
                                    moves[x][y].pieceY = pieceMoves[z][w].pieceY
                                    
                                FIN SI
                            FIN POUR
                        FIN POUR
                    FIN POUR
                FIN POUR
            FIN SI
        FIN POUR
    FIN POUR

    pieceMove bestMove
    bestMove.score = -5000

    POUR x allant de 0 a 7 FAIRE
    
        POUR y allant de 0 a 7 FAIRE
            SI bestMove.score < moves[x][y].score ALORS
            

                bestMove.score = moves[x][y].score
                bestMove.moveX = moves[x][y].moveX
                bestMove.moveY = moves[x][y].moveY
                bestMove.pieceX = moves[x][y].pieceX
                bestMove.pieceY = moves[x][y].pieceY
            FIN SI
        FIN POUR
    FIN POUR

    retourner bestMove
FIN